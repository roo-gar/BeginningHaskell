Table of contents:
A. Parametric Polymorphism (ParametricPolymorphism.hs)
B. High-order functions (HighorderFun.hs)
C. Anonymous functions (HighorderFun.hs)
D. Point-free style (HighorderFun.hs)
E. Modules
F. Folds (Lists.hs)
G. More list functions
H. List comprehensions
I. Unfolds

--- A ---
	• a polymorphic type is written with its name along with a list of all its type parameters

--- B ---
	• ($) :: (a -> b) -> a -> b
	• ($) apply a function to its arguments
	• Haskell gives a very low precedence to ($); therefore, we can omit a lot of parenthesis when using ($)
	• e.g. maximum (map succ [1, 2, 3]) is equal to maximum $ map succ [1, 2, 3]

--- C --- 
	Anonymous functions are function bodies that are not given a name and that can be written anywhere in the code where a function is expected. 
	The function body syntax is: \param1 param2 ... -> body
	(e.g. map ( \x -> x + 2 ) [1,2,3])
	• a section is just a specification of the operation to be done, enclosed in parenthesis, and where the parameters for the anonymous function are completely wiped out. (e.g. map (/2) [1,2,3])
	• if a keyword appears in the end of both parameters lists (e.g. double list = map (\x -> x * 2) list) it can be omitted double = map (\x -> x * 2)

--- D ---
	Partial application encourages a programming style where functions are combined without ever mentioning their parameters which is called point-free style
	• the most important of these combinators is the period (.), which composes two functions (f . g = \x -> f (g x))
	• combinators are functions that create a point-free style by combining other functions (e.g. curry and uncurry)

--- E ---
	• module imports are listed after the module declaration, but before any other definition
	• you can specify that you wish to import only some functions (e.g. import Data.List ( permutations, subsequence ))
	• you can specify that you wish to import everything except functions (e.g. import Data.List hiding ( head, tail ))
	• to import or hide a data type extra syntax is required
	(e.g.	import Chapter3.ParamPoly ( Client() )                    	-- only type, no constructors
			import Chapter3.ParamPoly ( Client(GovOrg,Individual) )     -- a subset of constructors
			import Chapter3.ParamPoly ( Client(..) )   					-- .. is used for importing all constructors)
	• a qualified import requires you to prefix a function with the name of the module it came from (e.g. import qualified Data.List (permutations, subsequence))
	• you can rename the module using as (e.g. import qualified Data.List as L)
	• you can control which declarations you want to export (e.g. module M (f) where ... will only export function f)

--- F ---
	A fold over a data structure such as a list is a function that aggregates or combines all the values contained in that structure to produce a single result.

--- G ---
	• filter :: (a -> Bool) -> [a] -> [a]
	• nubBy :: (a -> a -> Bool) -> [a] -> [a] *takes out elements such that no two elements in the returned list are equivalent
	• partition :: (a -> Bool) -> [a] -> ([a], [a])
	• find :: Foldable t => (a -> Bool) -> t a -> Maybe a
	• dropWhile :: (a -> Bool) -> [a] -> [a]
	• takeWhile :: (a -> Bool) -> [a] -> [a]
	• span :: (a -> Bool) -> [a] -> ([a], [a]) *returns both the taken and the dropped list
	• any :: Foldable t => (a -> Bool) -> t a -> Bool
	• all :: Foldable t => (a -> Bool) -> t a -> Bool
	• unionBy :: (a -> a -> Bool) -> [a] -> [a] -> [a]
	• intersectBy :: (a -> a -> Bool) -> [a] -> [a] -> [a]
	• insert :: Ord a => a -> [a] -> [a]
	• (\\) :: Eq a => [a] -> [a] -> [a] *set difference
	• elem :: (Foldable t, Eq a) => a -> t a -> Bool *contains
	• compare :: Ord a => a -> a -> Ordering
	• flip :: (a -> b -> c) -> b -> a -> c
	• on :: (b -> b -> c) -> (a -> b) -> a -> a -> c *import Data.Function

--- H ---
 	List comprehensions have two parts, separated by | and wrapped by square brackets.
 	The first part is the expression, which defines a transformation to apply to all the elements that will be returned.
 	The second part is made of a list of qualifiers, and specifies from whence the elements will come, and the constraints upon them.
 	• generators accept pattern matching (e.g. [ clientName x | x@(GovOrg _ _) <- listOfClients ])
 	• a list comprehension may have multiple generators (e.g. [(x,y,x*y) | x <- [1 .. 4], y <- [1 .. 10]])
 	• a generator may also depend on other values in the comprehension (e.g. [ toUpper c | s <- ["This","is","a","list"], c <- ' ':s ])
 	• local bindings are allowed (e.g. [ sqrt v | (x,y) <- [(1,2),(3,8)], let v = x*x+y*y ])
 	• list comprehensions allow filtering out some elements using a guard (e.g. [(x,y) | x <- [1 .. 6], y <- [1 .. 6], x <= y])
 	
 --- I ---
 	The algorithm for unfolding is the following: start with a seed of type b.
 	Apply the function given as first argument.
 	You can get two kinds of output: Nothing signals that unfoldr should stop producing elements, whereas Just (x, s) attaches x to the new list and continues the process with a new seed s.
 	• unfoldr :: (b -> Maybe (a, b)) -> b -> [a] *Available in Data.List