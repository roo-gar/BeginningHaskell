Table of contents:
A. Type notation
B. Basic Data Types
C. if-then-else (SimpleFunctions.hs)
D. Local bindings (SimpleFunctions.hs)
E. Function definitions and type signatures (SimpleFunctions.hs)
F. ADTs (DataTypes.hs)
G. Pattern Matching (DataTypes.hs & SimpleFunctions.hs)
H. Default value (SimpleFunctions.hs)
I. Guards (DataTypes.hs & SimpleFunctions.hs)
F. View Patterns (DataTypes.hs)

--- A ---
The type of an expression e can be obained by entering :type e or by entering :t e
• v :: T means that v is a value in the type T (e.g. False :: Bool)
• e :: T means that the expression e will produce a value of type T (e.g. not True :: Bool)

--- B ---
Basic Data Types

I. Char
	• Can be written in three different ways: 'a', \97', or '\x61'
	• Extra functionality is provided by Data.Char module

II. Num
	Can be one of the following types:
	1. Int: bounded integer type with range -2^63 to 2^63 - 1
	2. Integer: the unbounded integer type which can support any decimal value
	3. Fractional: 
		Can be one of the following types: 
		3.1. Float: single precission floating-point number
		3.2. Double: double precission floating-point number
		3.3. Ratio: rational number (e.g. 1 % 2) 
			* Data.Ratio module must be imported

III. [Char] a.k.a. string
	• Written between double quotes (e.g. "Hello")

IV. [τ] a.k.a. lists
	• Lists are homogeneus
	• Lists are linked lists
	• Basic list operations:
		a) cons: append an element to the end of the list
			(:) :: a -> [a] -> [a] 
			> 1 : 2 : 3 : []
			> [1,2,3]
		b) null: check wehter the list is empty
			null :: Foldable t => t a -> Bool
			> null []
			> True
		c) head: get the first element of the list
			head :: [a] -> a
			> head [1, 2]
			> 1
		d) tail: get the list without the first element
			tail :: [a] -> [a]
			> tail [1,2,3]
			> [2,3]
		e) concat: concatenate one list with another
			(++) :: [a] -> [a] -> [a]
			> [1,2] ++ [3,3]
			> [1,2,3,3]
		f) get the nth element of the list
			(!!) :: [a] -> Int -> a
			> [1, 2, 3, 4, 5] !! 2
			> 3

V. Bool
	• True or False values
	• Support long-circuiting (& and |) and short-circuiting (&&, || and not)

VI. (a, b), (a, b, c), ... a.k.a. tuple
	• Tuples can be heterogeneus	 
	• A pair is a tuple with two elements that supports the following operations
		a) fst: get the first element of the pair
			fst :: (a, b) -> a
			> fst (1, 2)
			> 1
		b) snd: get the second element of the pair
			snd :: (a, b) -> b
			> snd (1, 2)
			> 2

--- C ---
	if <b> then <t> else <f> expression must fulffill the next requirements
	• t and f must be expression themselves
    • both then and else branches must be present along with the if
    • the entire expression must have a defined type
    (e.g. if 3 < 4.5 then "3 is less than 4.5" else "3 is not less than 4.5")

--- D ---
	There are two kinds of bindings:
	1. let: introduces the binding before the main expression
		• let <name> = <expression> in <main expression...>
	2. where: introduces the binding after the main expression
		• <main expression...> where <name> = <expression> 

--- E ---
	* See SimpleFunctions.hs

--- F ---
	ADTs (Algebraic Data Types): is the most basic kind of data types you can create in Haskell.
	A ADT is defined by two pieces of data:
	1. a name for the type
	2. a set of constructors
		• inside a module all constructors must have different names
		• data types and constructor names live in different worlds, so it is possible to create a constructor with the same names as a data type

	Default deriving allows adding some functionality to an ADT without writing code.
	• To get a string representation of values you need to derive Show

--- G ---
	• patterns are checked in the same order they appear in the code
	• constants are also patterns
	• it’s customary in Haskell to write pattern matching on lists using a letter or a small word followed by the same identifier in plural, like x:xs.
	• as patterns - allows you to bind some value in the match, while at the same time allowing you to match on inner components of that value; to use it, you have to wrap into parentheses the whole pattern you want to give a name to, and prepend it by the variable that will be used to refer to the whole pattern and the @ symbol
	• matching on tuples is also easy: just use the syntax of a comma-separated list of components between parentheses

--- H ---
	In some cases, a default value can be returned when we don’t get an applicable value.
	This problem is so common in practice that the Haskell Platform already bundles a special data type for this matter: Maybe τ.
	As lists and tuples, the Maybe type is parameterized by the type of value it holds, so you have Maybe Integer, Maybe String, Maybe [Integer] and so on.
	There are only two kinds of values that this type can have: Nothing, with no arguments, usually signaling that the function doesn’t have nothing sensible to return forthat specific value, and Just v, that holds a single value v of the corresponding type.

--- I ---
	A guard is part of the pattern matching syntax that allows you to refine a pattern using Boolean conditions that must be fulfilled by the bound values after a successful match.

--- F ---
	Sometimes you want to look for patterns in a value, but in some way they are not directly encoded.
	So you need to preprocess the value before matching.
	For those cases, we can use view patterns.
	These patterns extend all of those previously seen with a new syntax element, (function -> pattern), which applies function to the value and then matches the result with the pattern.
	• To enable view patterns you neeed to add the following pragma at the beginning of the source: {-# LANGUAGE ViewPatterns #-}